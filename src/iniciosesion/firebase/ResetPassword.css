/* src/iniciosesion/firebase/ResetPassword.css */

.reset-password-container {
    max-width: 400px;
    margin: 0 auto;
    padding: 20px;
    background-color: #8c1713;
  }
  .reset-password-container h2{
    color: white;
    margin-bottom: 30px;
    font-weight: 300;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .reset-password-container form {
    display: flex;
    flex-direction: column;
  }
  
  .reset-password-container input {
    margin-bottom: 10px;
    padding: 10px;
   
  }
  
  .reset-password-container button {
    padding: 10px;
    font-size: 1rem;
    color: white;
    background-color: #007bff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .reset-password-container button:hover {
    background-color: #0056b3;
  }
  
  .reset-password-container .error-message {
    color: red;
    font-size: 0.9rem;
    text-align: center;
    margin-top: 10px;
  }
  
  .reset-password-container .success-message {
    color: green;
    font-size: 0.9rem;
    text-align: center;
    margin-top: 10px;
  }
  
  /* Media queries para pantallas medianas y pequeñas */

/* Pantallas medianas (tabletas) */
@media (max-width: 768px) {
  .reset-password-container {
    padding: 15px;
    margin: 0 20px;
 
  }

  .reset-password-container h2 {
    font-size: 1.5rem; /* Ajusta el tamaño del texto del título */
  }

  .reset-password-container input {
    padding: 8px; /* Reduce el padding en los campos de entrada */
  }

  .reset-password-container button {
    padding: 8px; /* Reduce el padding del botón */
    font-size: 0.9rem; /* Ajusta el tamaño del texto del botón */
  }
}

/* Pantallas pequeñas (teléfonos móviles) */
@media (max-width: 480px) {
  .reset-password-container {
    padding: 10px;
    margin: 0 20px;
  }

  .reset-password-container h2 {
    font-size: 1.2rem; /* Ajusta el tamaño del texto del título */
    margin-bottom: 20px; /* Reduce el margen inferior */
  }

  .reset-password-container input {
    padding: 6px; /* Reduce aún más el padding en los campos de entrada */
    font-size: 0.9rem; /* Ajusta el tamaño del texto en los campos de entrada */
  }

  .reset-password-container button {
    padding: 6px; /* Reduce el padding del botón */
    font-size: 0.8rem; /* Ajusta el tamaño del texto del botón */
  }
}
/*
import React, { useState, useCallback } from 'react';
import Login from './Login';
import ResetPassword from './ResetPassword';
import Modal from './Modal';

const VisibilidadModales = () => {
  const [showLoginModal, setShowLoginModal] = useState(true);
  const [showResetPasswordModal, setShowResetPasswordModal] = useState(false);
  const [modalKey, setModalKey] = useState(0);
  const [emailForReset, setEmailForReset] = useState('');

  const handleLoginSuccess = useCallback(() => {
    console.log('handleLoginSuccess llamado');
    setShowLoginModal(false);
    setModalKey(prevKey => prevKey + 1);
  }, []);

  const handleForgotPasswordClick = (email) => {
    console.log('handleForgotPasswordClick en VisibilidadModales con email:', email);

    if (email) {
      setEmailForReset(email);
      console.log('Email almacenado para restablecer contraseña:', email);

      setShowLoginModal(false);
      setShowResetPasswordModal(true);
      setModalKey(prevKey => prevKey + 1);
    } else {
      console.error('Email no proporcionado para restablecimiento de contraseña');
    }
  };

  const closeResetPasswordModal = () => {
    setShowResetPasswordModal(false);
    setShowLoginModal(true);
  };

  const handleCloseLoginModal = () => {
    setShowLoginModal(false);
    setEmail('');
  setPassword('');
    // Aquí puedes añadir lógica para limpiar los inputs de Login si es necesario
    setModalKey(prevKey => prevKey + 1); // Reinicia la clave del modal para forzar el reinicio
  };

  return (
    <div className="app">
      {showLoginModal && (
        <Modal key={`login-${modalKey}`} isOpen={showLoginModal} onClose={handleCloseLoginModal}>
          <Login 
            onForgotPassword={handleForgotPasswordClick} 
            onLoginSuccess={handleLoginSuccess} 
            onClose={handleCloseLoginModal} // Asegúrate de pasar onClose a Login
          />
              <ModalHandler onSuccess={handleLoginSuccess} onClose={handleCloseLoginModal} />
        </Modal>
      )}

      {showResetPasswordModal && (
        <Modal key={`reset-${modalKey}`} isOpen={showResetPasswordModal} onClose={closeResetPasswordModal}>
          <ResetPassword email={emailForReset} onClose={closeResetPasswordModal} />
          <ModalHandler onSuccess={handleLoginSuccess} onClose={handleCloseLoginModal} />
        </Modal>
      )}
    </div>
  );
};

export default VisibilidadModales;
--------------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { signInWithEmailAndPassword, sendPasswordResetEmail } from 'firebase/auth';
import { auth } from './FirebaseSesion';
import { useNavigate } from 'react-router-dom';
import './Login.css';

const Login = ({ onForgotPassword, onLoginSuccess }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [forgotPasswordMode, setForgotPasswordMode] = useState(false);
  const [resetEmail, setResetEmail] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      await signInWithEmailAndPassword(auth, email, password);
      setEmail('');
      setPassword('');

      if (onLoginSuccess) {
        onLoginSuccess();
      }

      navigate('/perfil');
    } catch (error) {
      console.error('Error durante el inicio de sesión:', error);
      if (error.code === 'auth/user-not-found') {
        setError('ERROR: el usuario no existe. <a href="/register" class="create-account-link">Cree una cuenta</a>.');
      } else if (error.code === 'auth/wrong-password') {
        setError('ERROR: contraseña incorrecta. <a href="/register" class="create-account-link">Cree una cuenta</a>.');
      } else if (error.code === 'auth/invalid-credential') {
        setError('ERROR: de usuario. Por favor, verifique su información de inicio de sesión.');
      } else {
        setError(`Error: ${error.message}`); // Corregido para usar comillas invertidas
      }

      setEmail('');
      setPassword('');
    } finally {
      setLoading(false);
    }
  };

  const handleForgotPasswordClick = (e) => {
    e.preventDefault();
    console.log('handleForgotPasswordClick en Login con email:', email);

    if (email) {
      setForgotPasswordMode(true);
      setResetEmail(email); 
      console.log('Llamando a onForgotPassword con email:', email);
      onForgotPassword(email);
      console.log('Estado después de manejar olvido de contraseña:', { forgotPasswordMode, resetEmail });
    } else {
      console.error('Email no proporcionado para restablecimiento de contraseña');
      setError('Por favor, ingresa tu correo electrónico para restablecer la contraseña');
    }
  };

  const handleResetPassword = async (e) => {
    e.preventDefault();
    console.log('handleResetPassword con email:', resetEmail);

    if (resetEmail) {
      console.log('Enviando código de restablecimiento a:', resetEmail);

      try {
        await sendPasswordResetEmail(auth, resetEmail);
        setError('');
        setResetEmail('');
        setForgotPasswordMode(false); 
        console.log('Código de restablecimiento enviado correctamente.');
      } catch (error) {
        console.error('Error al enviar el correo de restablecimiento:', error);
        setError('Hubo un error al enviar el correo de restablecimiento. Por favor, inténtalo de nuevo.');
      }
    } else {
      setError('Por favor, ingresa tu correo electrónico para enviar el código de restablecimiento');
    }
  };

  return (
    <div className="login-container">
      <form onSubmit={forgotPasswordMode ? handleResetPassword : handleLogin}>
        <input
          type="email"
          className="input_login"
          value={forgotPasswordMode ? resetEmail : email}
          onChange={(e) => forgotPasswordMode ? setResetEmail(e.target.value) : setEmail(e.target.value)}
          placeholder="Email"
          required
          autoComplete="email"
          disabled={loading}
        />
        
        {!forgotPasswordMode && (
          <input
            type="password"
            className="input_login"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Contraseña"
            required
            autoComplete="current-password"
            disabled={loading}
          />
        )}
        
        {error && <p className="error-message" dangerouslySetInnerHTML={{ __html: error }} />}
        
        <button type="submit" disabled={loading}>
          {loading ? 'Enviando...' : forgotPasswordMode ? 'ENVIAR CÓDIGO' : 'INICIAR SESIÓN'}
        </button>
        
        {!forgotPasswordMode && (
          <p className="mensaje_login">
            ¿Has olvidado tu contraseña? Haz clic en el botón y te enviaremos un código al email para restablecer tu contraseña.
          </p>
        )}
        
        {!forgotPasswordMode && (
          <button 
            className='reset_password' 
            onClick={handleForgotPasswordClick}
            disabled={loading}
          >
            ENVIAR CÓDIGO PARA RESTABLECER LA CONTRASEÑA
          </button>
        )}
      </form>
    </div>
  );
};

Login.propTypes = {
  onForgotPassword: PropTypes.func.isRequired,
  onLoginSuccess: PropTypes.func,
};

export default Login;
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import React, { useEffect, useState } from 'react';
import { auth } from './FirebaseSesion';
import { sendPasswordResetEmail } from 'firebase/auth';
import './ResetPassword.css';

const ResetPassword = ({ email, onClose }) => {
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');
  const [isEmailSent, setIsEmailSent] = useState(false);

  const handleResetPassword = async (e) => {
    e.preventDefault();
    try {
      await sendPasswordResetEmail(auth, email);
      setIsEmailSent(true);
      setMessage('Se ha enviado un correo electrónico para restablecer tu contraseña.');
    } catch (error) {
      console.error('Error al enviar el correo de restablecimiento:', error);
      setError('Hubo un error al enviar el correo de restablecimiento. Por favor, inténtalo de nuevo.');
    }
  };

  // Limpia los inputs cuando el componente se desmonta
  useEffect(() => {
    return () => {
      setError('');
      setMessage('');
      setIsEmailSent(false);
    };
  }, []);

  return (
    <div className="reset-password-container">
      <form onSubmit={handleResetPassword}>
        <input
          type="email"
          value={email}
          readOnly
          placeholder="Email"
        />
        <button type="submit">
          ENVIAR CÓDIGO
        </button>
        {message && <p className="message">{message}</p>}
        {error && <p className="error">{error}</p>}
        <button type="button" onClick={onClose}>Cerrar</button>
      </form>
    </div>
  );
};

export default ResetPassword;


*/