/* Estilos para el modal */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1050;
}

.modal-content {
  background-color: #8c1713;
  padding: 30px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  position: relative;
  max-width: 500px;
  width: 100%;
  max-height: 90vh; /* Limita la altura máxima del modal */
  overflow-y: auto;
}

.modal-content h2 {
  color: white;
  display: flex;
  justify-content: center;
  font-weight: 300;
  font-size: 2.5rem;
}

.modal-close {
  position: absolute;
  top: 15px;
  right: 15px;
  border: none;
  background: transparent;
  font-size: 1.5rem;
  cursor: pointer;
  color: white;
}

/* Estilos para el formulario de inicio de sesión y registro */
.form-container {
  display: flex;
  flex-direction: column;
}

.form-container h2 {
  margin-bottom: 20px;
  font-size: 1.5rem;
  text-align: center;
}

.form-container input {
  margin-bottom: 15px;
  padding: 10px;
  font-size: 1rem;
  border: 1px solid #ddd;
  border-radius: 5px;
}

.form-container button {
  padding: 10px;
  font-size: 1rem;
  color: rgb(245, 244, 244);
  background-color: #007bff;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.form-container button:disabled {
  background-color: #aaa;
  cursor: not-allowed;
}

.form-container button:hover:not(:disabled) {
  background-color: #0056b3;
}

.form-container p {
  color: red;
  font-size: 0.9rem;
  text-align: center;
}
/*¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
 modal -------------------------
 import React, { useEffect } from 'react';
import ReactDOM from 'react-dom';
import './Modal.css';

const Modal = ({ isOpen, onClose, children }) => {
  useEffect(() => {
    console.log('Modal isOpen:', isOpen);
  
    const handleOutsideClick = (e) => {
      if (e.target.className === 'modal-overlay') {
        onClose();
      }
    };

    document.addEventListener('mousedown', handleOutsideClick);
    return () => document.removeEventListener('mousedown', handleOutsideClick);
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return ReactDOM.createPortal(
    <div className="modal-overlay">
      <div className="modal-content">
        <button className="modal-close" onClick={onClose}>×</button>
        {children}
      </div>
    </div>,
    document.body
  );
  
};

export default Modal;


¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
import React, { useState, useCallback } from 'react';
import Login from './Login';
import ResetPassword from './ResetPassword';
import Modal from './Modal';

const VisibilidadModales = () => {
  const [showLoginModal, setShowLoginModal] = useState(true);
  const [showResetPasswordModal, setShowResetPasswordModal] = useState(false);
  const [modalKey, setModalKey] = useState(0);
  const [emailForReset, setEmailForReset] = useState('');

  const handleLoginSuccess = useCallback(() => {
    console.log('handleLoginSuccess llamado');
    setShowLoginModal(false);
    setModalKey(prevKey => prevKey + 1);
  }, []);

  const handleForgotPasswordClick = (email) => {
    console.log('handleForgotPasswordClick en VisibilidadModales con email:', email);

    if (email) {
      setEmailForReset(email);
      console.log('Email almacenado para restablecer contraseña:', email);

      setShowLoginModal(false);
      setShowResetPasswordModal(true);
      setModalKey(prevKey => prevKey + 1);
    } else {
      console.error('Email no proporcionado para restablecimiento de contraseña');
    }
  };

  const closeResetPasswordModal = () => {
    setShowResetPasswordModal(false);
    setShowLoginModal(true);
  };

  const handleCloseLoginModal = () => {
    setShowLoginModal(false);
    setEmail('');
  setPassword('');
    // Aquí puedes añadir lógica para limpiar los inputs de Login si es necesario
    setModalKey(prevKey => prevKey + 1); // Reinicia la clave del modal para forzar el reinicio
  };

  return (
    <div className="app">
      {showLoginModal && (
        <Modal key={`login-${modalKey}`} isOpen={showLoginModal} onClose={handleCloseLoginModal}>
          <Login 
            onForgotPassword={handleForgotPasswordClick} 
            onLoginSuccess={handleLoginSuccess} 
            onClose={handleCloseLoginModal} // Asegúrate de pasar onClose a Login
          />
        </Modal>
      )}

      {showResetPasswordModal && (
        <Modal key={`reset-${modalKey}`} isOpen={showResetPasswordModal} onClose={closeResetPasswordModal}>
          <ResetPassword email={emailForReset} onClose={closeResetPasswordModal} />
        </Modal>
      )}
    </div>
  );
};

export default VisibilidadModales;


*****************************************************************
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { signInWithEmailAndPassword, sendPasswordResetEmail } from 'firebase/auth';
import { auth } from './FirebaseSesion';
import { useNavigate } from 'react-router-dom';
import './Login.css';

const Login = ({ onForgotPassword, onLoginSuccess }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [forgotPasswordMode, setForgotPasswordMode] = useState(false);
  const [resetEmail, setResetEmail] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      await signInWithEmailAndPassword(auth, email, password);
      setEmail('');
      setPassword('');

      if (onLoginSuccess) {
        console.log('onLoginSuccess called');
        onLoginSuccess();
      }
      setTimeout(() => {
       navigate('/perfil');
      }, 300);
      //navigate('/perfil');
    } catch (error) {
      console.error('Error durante el inicio de sesión:', error);
      if (error.code === 'auth/user-not-found') {
        setError('ERROR: el usuario no existe. <a href="/register" class="create-account-link">Cree una cuenta</a>.');
      } else if (error.code === 'auth/wrong-password') {
        setError('ERROR: contraseña incorrecta. <a href="/register" class="create-account-link">Cree una cuenta</a>.');
      } else if (error.code === 'auth/invalid-credential') {
        setError('ERROR: de usuario. Por favor, verifique su información de inicio de sesión.');
      } else {
        setError(`Error: ${error.message}`); // Corregido para usar comillas invertidas
      }

      setEmail('');
      setPassword('');
    } finally {
      setLoading(false);
    }
  };

  const handleForgotPasswordClick = (e) => {
    e.preventDefault();
    console.log('handleForgotPasswordClick en Login con email:', email);

    if (email) {
      setForgotPasswordMode(true);
      setResetEmail(email); 
      console.log('Llamando a onForgotPassword con email:', email);
      onForgotPassword(email);
      console.log('Estado después de manejar olvido de contraseña:', { forgotPasswordMode, resetEmail });
    } else {
      console.error('Email no proporcionado para restablecimiento de contraseña');
      setError('Por favor, ingresa tu correo electrónico para restablecer la contraseña');
    }
  };

  const handleResetPassword = async (e) => {
    e.preventDefault();
    console.log('handleResetPassword con email:', resetEmail);

    if (resetEmail) {
      console.log('Enviando código de restablecimiento a:', resetEmail);

      try {
        await sendPasswordResetEmail(auth, resetEmail);
        setError('');
        setResetEmail('');
        setForgotPasswordMode(false); 
        console.log('Código de restablecimiento enviado correctamente.');
      } catch (error) {
        console.error('Error al enviar el correo de restablecimiento:', error);
        setError('Hubo un error al enviar el correo de restablecimiento. Por favor, inténtalo de nuevo.');
      }
    } else {
      setError('Por favor, ingresa tu correo electrónico para enviar el código de restablecimiento');
    }
  };

  return (
    <div className="login-container">
      <form onSubmit={forgotPasswordMode ? handleResetPassword : handleLogin}>
        <input
          type="email"
          className="input_login"
          value={forgotPasswordMode ? resetEmail : email}
          onChange={(e) => forgotPasswordMode ? setResetEmail(e.target.value) : setEmail(e.target.value)}
          placeholder="Email"
          required
          autoComplete="email"
          disabled={loading}
        />
        
        {!forgotPasswordMode && (
          <input
            type="password"
            className="input_login"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Contraseña"
            required
            autoComplete="current-password"
            disabled={loading}
          />
        )}
        
        {error && <p className="error-message" dangerouslySetInnerHTML={{ __html: error }} />}
        
        <button type="submit" disabled={loading}>
          {loading ? 'Enviando...' : forgotPasswordMode ? 'ENVIAR CÓDIGO' : 'INICIAR SESIÓN'}
        </button>
        
        {!forgotPasswordMode && (
          <p className="mensaje_login">
            ¿Has olvidado tu contraseña? Haz clic en el botón y te enviaremos un código al email para restablecer tu contraseña.
          </p>
        )}
        
        {!forgotPasswordMode && (
          <button 
            className='reset_password' 
            onClick={handleForgotPasswordClick}
            disabled={loading}
          >
            ENVIAR CÓDIGO PARA RESTABLECER LA CONTRASEÑA
          </button>
        )}
      </form>
    </div>
  );
};

Login.propTypes = {
  onForgotPassword: PropTypes.func.isRequired,
  onLoginSuccess: PropTypes.func,
};

export default Login;

 */