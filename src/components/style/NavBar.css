.contenedor {
  padding: 10px;
  padding: 0;
  margin: 0;
}

.navbar-brand {
  font-size: 2.5rem; /* Tamaño del texto del logo */
  margin-right: auto; /* Empuja el logo a la izquierda */
  padding: 0 10px;
  color: rgba(140, 23, 19, 1);
  display: flex; /* Para que las partes del logo estén en línea */
}




.navbar-nav {
  margin-left: auto; /* Empuja los elementos a la derecha */
}

.nav-link {

  font-size: 1.2rem;
  color: rgba(140, 23, 19, 1);
  letter-spacing: 1.8px;
  word-spacing: 1rem;
  margin-left: 15px; 
  margin-right: 25px;
  position: relative; /* Necesario para posicionar el pseudo-elemento */
  margin-bottom: 1px;
  cursor: pointer;
  text-decoration: none; /* Quita el subrayado por defecto */
  padding-bottom: 4px; /* Espacio para la línea */
  transition: color 0.3s ease;
}

.nav-link::after {
  content: '';
  position: absolute;
  left: 0;
  bottom: -4px; /* Espacio entre la palabra y la línea */
  width: 0%;
  height: 2px; /* Altura de la línea */
  background: linear-gradient(to right, rgba(10, 2, 239, 0) 0%, rgb(26, 26, 28) 50%, rgba(10, 2, 239, 0) 100%); /* Gradiente */
  transition: width 0.3s ease;
}

.nav-link:hover {
     color: black;
}
.nav-link:hover::after {
  width: 100%;
}
/* src/components/style/NavBar.css */
.ReactModal__Overlay {
  z-index: 1000; /* Asegúrate de que el modal esté encima de otros elementos */
  background-color: rgba(0, 0, 0, 0.5); /* Asegúrate de que el overlay sea visible */

}

.ReactModal__Content {
  max-width: 500px;
  margin: auto;
  padding: 20px;
  border-radius: 8px;
  background-color: #fff;
  position: relative;
}

button {
  margin-top: 10px;
}
.boton_registro{
  background-color: rgb(8, 0, 255);
  color: white;
  padding: 10px 0;
  margin: 30px 20px;
}

/* Media Query para pantallas medianas y más pequeñas */
@media (max-width: 768px) {
  .nav-link {
    font-size: 0.8rem;
    position: relative; /* Necesario para posicionar el pseudo-elemento */
    margin-bottom: 1px;
    cursor: pointer;
    text-decoration: none; /* Quita el subrayado por defecto */
    padding-bottom: 4px; /* Espacio para la línea */
  }
  .nav-link::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 2.5px; /* Altura de la línea */
    background: linear-gradient(to right, rgba(10, 2, 239, 0) 0%, rgba(140, 23, 19, 1) 50%, rgba(10, 2, 239, 0) 100%); /* Gradiente */
    transform: scaleX(0);
    transform-origin: center;
    transition: transform 0.3s ease;
  }
  .nav-link:hover::after {
    transform: scaleX(1);
  }
  .navbar-collapse {
    display: none !important;
  }

  .navbar-toggler {
    display: block !important;
  }

  .navbar-collapse.show {
    display: block !important;
  }
}


/*
import React, { useState, useEffect, useRef } from 'react';
import { Link, NavLink } from 'react-router-dom';
import Modal from '../iniciosesion/firebase/Modal'; // Asegúrate de la ruta correcta
import Login from '../iniciosesion/firebase/Login'; // Ajusta la ruta si es necesario
import Register from '../iniciosesion/firebase/Register'; // Ajusta la ruta si es necesario
import { auth } from '../iniciosesion/firebase/FirebaseSesion'; // Importa auth
import { signOut } from 'firebase/auth'; // Importa signOut
import { useAuth } from '../iniciosesion/firebase/AuthProvider'; // Importa useAuth
import './style/NavBar.css'; // Asegúrate de que esta es la ruta correcta

const NavBar = () => {
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [isLogin, setIsLogin] = useState(true);
  const [isNavOpen, setIsNavOpen] = useState(false); // Estado para controlar el menú de navegación
  const navRef = useRef(null); // Referencia para la navegación
  const { user } = useAuth(); // Usa el hook useAuth para obtener el usuario

  const openModal = () => setModalIsOpen(true);
  const closeModal = () => setModalIsOpen(false);
  const toggleForm = () => setIsLogin(!isLogin);
  
  const handleLogout = async () => {
    try {
      await signOut(auth);
      console.log('Sesión cerrada');
      window.location.href = '/'; // Redirecciona a la página de inicio
    } catch (error) {
      console.error('Error al cerrar sesión: ', error);
    }
  };

  const toggleNav = () => setIsNavOpen(!isNavOpen);

  // Función para manejar el clic en "Olvidé mi contraseña"
  const handleForgotPasswordClick = (email) => {
    console.log('handleForgotPasswordClick en NavBar con email:', email);
    // Aquí podrías abrir un modal o redirigir al usuario a una página de recuperación de contraseña
  };

  // Cierra el menú al hacer clic fuera de él
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (navRef.current && !navRef.current.contains(event.target)) {
        setIsNavOpen(false);
      }
    };

    document.addEventListener('click', handleClickOutside);

    return () => {
      document.removeEventListener('click', handleClickOutside);
    };
  }, []);

  return (
    <>
      <div className="contenedor">
        <nav className="navbar navbar-expand-lg bg-body-tertiary" ref={navRef}>
          <div className="container-fluid">
            <Link to='/' className="navbar-brand"> il Napoli </Link>
            <button className="navbar-toggler" type="button" onClick={toggleNav}>
              <span className="navbar-toggler-icon"></span>
            </button>
            <div className={`collapse navbar-collapse ${isNavOpen ? 'show' : ''}`} id="navbarNav">
              <ul className="navbar-nav">
                <li className="nav-item">
                  <NavLink to='/' className="nav-link">INICIO</NavLink>
                </li>
                <li className="nav-item">
                  <NavLink to='/carta' className="nav-link">CARTA</NavLink>
                </li>
                <li className="nav-item">
                  <NavLink to='/especialidades' className="nav-link">ESPECIALIDADES</NavLink>
                </li>
                <li className="nav-item">
                  <NavLink to='/menu' className="nav-link">MENÚ</NavLink>
                </li>
                <li className="nav-item">
                  <NavLink to='/reserva' className="nav-link">RESERVA</NavLink>
                </li>
                {user && (
                  <li className="nav-item">
                    <NavLink to='/perfil' className="nav-link">Perfil</NavLink>
                  </li>
                )}
                {user ? (
                  <li className="nav-item">
                    <button className="nav-link btn btn-danger" onClick={handleLogout}>Cerrar sesión</button>
                  </li>
                ) : (
                  <li className="nav-item">
                    <button className="nav-link btn btn-primary" onClick={openModal}>Iniciar sesión</button>
                  </li>
                )}
              </ul>
            </div>
          </div>
        </nav>
      </div>

      <Modal isOpen={modalIsOpen} onClose={closeModal}>
        <h2>{isLogin ? 'Iniciar sesión' : 'Registrarse'}</h2>
        {isLogin ? (
          <Login 
            onForgotPassword={handleForgotPasswordClick} 
            onSuccess={closeModal} 
          />
        ) : (
          <Register />
        )}
        <button className='boton_registro' onClick={toggleForm}>
          {isLogin ? '¿No tienes una cuenta? Regístrate' : '¿Ya tienes una cuenta? Inicia sesión'}
        </button>
      </Modal>
    </>
  );
};

export default NavBar;


*/